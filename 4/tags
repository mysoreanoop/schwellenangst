!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/anoop/uw/schwellenangst/4/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20211107.0/
ADDI	accelerated_branch.sv	/^`define ADDI 1$/;"	c
ADDI	control.sv	/^`define ADDI 1$/;"	c
ADDS	accelerated_branch.sv	/^`define ADDS 2$/;"	c
ADDS	control.sv	/^`define ADDS 2$/;"	c
ALUOp	control.sv	/^ output logic [2:0] ALUOp;$/;"	p	module:control
ALUOp	pipelined_cpu.sv	/^logic [2:0] ALUOp, ALUOp_IF, ALUOp_RF;$/;"	r	module:pipelined_cpu
ALUOp_IF	pipelined_cpu.sv	/^logic [2:0] ALUOp, ALUOp_IF, ALUOp_RF;$/;"	r	module:pipelined_cpu
ALUOp_RF	pipelined_cpu.sv	/^logic [2:0] ALUOp, ALUOp_IF, ALUOp_RF;$/;"	r	module:pipelined_cpu
ALUOp_RF_reg	pipelined_cpu.sv	/^register_v #(1) ALUOp_RF_reg(ALUOp_RF, ALUOp, clk, reset, e); $/;"	i	module:pipelined_cpu
ALUSrc	control.sv	/^ output logic [1:0] MemToReg, ALUSrc;$/;"	p	module:control
ALUSrc	pipelined_cpu.sv	/^logic [1:0] MemToReg, ALUSrc, MemToReg_IF, ALUSrc_IF,MemToReg_RF, ALUSrc_RF,MemToReg_EX;$/;"	r	module:pipelined_cpu
ALUSrc_IF	pipelined_cpu.sv	/^logic [1:0] MemToReg, ALUSrc, MemToReg_IF, ALUSrc_IF,MemToReg_RF, ALUSrc_RF,MemToReg_EX;$/;"	r	module:pipelined_cpu
ALUSrc_RF	pipelined_cpu.sv	/^logic [1:0] MemToReg, ALUSrc, MemToReg_IF, ALUSrc_IF,MemToReg_RF, ALUSrc_RF,MemToReg_EX;$/;"	r	module:pipelined_cpu
ALUSrc_RF_reg	pipelined_cpu.sv	/^register_v #(1) ALUSrc_RF_reg(ALUSrc_RF, ALUSrc, clk, reset, e); $/;"	i	module:pipelined_cpu
B	accelerated_branch.sv	/^`define B    4$/;"	c
B	control.sv	/^`define B    4$/;"	c
BLT	accelerated_branch.sv	/^`define BLT  3$/;"	c
BLT	control.sv	/^`define BLT  3$/;"	c
BrTaken	accelerated_branch.sv	/^output logic BrTaken;$/;"	p	module:accelerated_branch
BrTaken_RF_reg	pipelined_cpu.sv	/^register_v #(1) BrTaken_RF_reg(BrTaken_RF, BrTaken, clk, reset, e); $/;"	i	module:pipelined_cpu
CBZ	accelerated_branch.sv	/^`define CBZ  5$/;"	c
CBZ	control.sv	/^`define CBZ  5$/;"	c
LDUR	accelerated_branch.sv	/^`define LDUR 6$/;"	c
LDUR	control.sv	/^`define LDUR 6$/;"	c
LSL	accelerated_branch.sv	/^`define LSL  7$/;"	c
LSL	control.sv	/^`define LSL  7$/;"	c
LSR	accelerated_branch.sv	/^`define LSR  8$/;"	c
LSR	control.sv	/^`define LSR  8$/;"	c
MUL	accelerated_branch.sv	/^`define MUL  9$/;"	c
MUL	control.sv	/^`define MUL  9$/;"	c
MemToReg	control.sv	/^ output logic [1:0] MemToReg, ALUSrc;$/;"	p	module:control
MemToReg	pipelined_cpu.sv	/^logic [1:0] MemToReg, ALUSrc, MemToReg_IF, ALUSrc_IF,MemToReg_RF, ALUSrc_RF,MemToReg_EX;$/;"	r	module:pipelined_cpu
MemToReg_EX	pipelined_cpu.sv	/^logic [1:0] MemToReg, ALUSrc, MemToReg_IF, ALUSrc_IF,MemToReg_RF, ALUSrc_RF,MemToReg_EX;$/;"	r	module:pipelined_cpu
MemToReg_EX_reg	pipelined_cpu.sv	/^register_v #(1) MemToReg_EX_reg(MemToReg_EX, MemToReg_RF, clk, reset, e); $/;"	i	module:pipelined_cpu
MemToReg_IF	pipelined_cpu.sv	/^logic [1:0] MemToReg, ALUSrc, MemToReg_IF, ALUSrc_IF,MemToReg_RF, ALUSrc_RF,MemToReg_EX;$/;"	r	module:pipelined_cpu
MemToReg_RF	pipelined_cpu.sv	/^logic [1:0] MemToReg, ALUSrc, MemToReg_IF, ALUSrc_IF,MemToReg_RF, ALUSrc_RF,MemToReg_EX;$/;"	r	module:pipelined_cpu
MemToReg_RF_reg	pipelined_cpu.sv	/^register_v #(1) MemToReg_RF_reg(MemToReg_RF, MemToReg, clk, reset, e); $/;"	i	module:pipelined_cpu
MemWrite	control.sv	/^ output logic Reg2Loc, RegWrite,MemWrite;$/;"	p	module:control
MemWrite	pipelined_cpu.sv	/^logic Reg2Loc, RegWrite,MemWrite;$/;"	r	module:pipelined_cpu
MemWrite_EX	pipelined_cpu.sv	/^logic RegWrite_EX, MemWrite_EX, RegWrite_MEM;$/;"	r	module:pipelined_cpu
MemWrite_EX_reg	pipelined_cpu.sv	/^register_v #(1) MemWrite_EX_reg(MemWrite_EX, MemWrite_RF, clk, reset, e); $/;"	i	module:pipelined_cpu
MemWrite_IF	pipelined_cpu.sv	/^logic RegWrite_IF, MemWrite_IF, RegWrite_RF,MemWrite_RF;$/;"	r	module:pipelined_cpu
MemWrite_RF	pipelined_cpu.sv	/^logic RegWrite_IF, MemWrite_IF, RegWrite_RF,MemWrite_RF;$/;"	r	module:pipelined_cpu
MemWrite_RF_reg	pipelined_cpu.sv	/^register_v #(1) MemWrite_RF_reg(MemWrite_RF, MemWrite, clk, reset, e); $/;"	i	module:pipelined_cpu
PC_INIT	accelerated_branch.sv	/^`define PC_INIT 0$/;"	c
PC_INIT	control.sv	/^`define PC_INIT 0$/;"	c
Rd	pipelined_cpu.sv	/^logic [4:0] Rm,Rn,Rd;$/;"	r	module:pipelined_cpu
Rd_EX_reg	pipelined_cpu.sv	/^register_v #(5) Rd_EX_reg(Rd_EX, Rd_RF, clk, reset, e); $/;"	i	module:pipelined_cpu
Rd_MEM_reg	pipelined_cpu.sv	/^register_v #(5) Rd_MEM_reg(Rd_MEM, Rd_EX, clk, reset, e); $/;"	i	module:pipelined_cpu
Rd_RF_reg	pipelined_cpu.sv	/^register_v #(5) Rd_RF_reg(Rd_RF, Rd, clk, reset, e); $/;"	i	module:pipelined_cpu
ReadData1	regfile.sv	/^ logic [63:0] ReadData2, ReadData1;$/;"	r	module:rf_tb
ReadData1	regfile.sv	/^ output logic [63:0] ReadData2, ReadData1;$/;"	p	module:regfile
ReadData2	regfile.sv	/^ logic [63:0] ReadData2, ReadData1;$/;"	r	module:rf_tb
ReadData2	regfile.sv	/^ output logic [63:0] ReadData2, ReadData1;$/;"	p	module:regfile
ReadRegister1	regfile.sv	/^ input logic [4:0] ReadRegister1, ReadRegister2, WriteRegister;$/;"	p	module:regfile
ReadRegister1	regfile.sv	/^ reg [4:0] ReadRegister1;$/;"	r	module:rf_tb
ReadRegister2	regfile.sv	/^ input logic [4:0] ReadRegister1, ReadRegister2, WriteRegister;$/;"	p	module:regfile
ReadRegister2	regfile.sv	/^ reg [4:0] ReadRegister2;$/;"	r	module:rf_tb
Reg2Loc	control.sv	/^ output logic Reg2Loc, RegWrite,MemWrite;$/;"	p	module:control
Reg2Loc	pipelined_cpu.sv	/^logic Reg2Loc, RegWrite,MemWrite;$/;"	r	module:pipelined_cpu
RegWrite	control.sv	/^ output logic Reg2Loc, RegWrite,MemWrite;$/;"	p	module:control
RegWrite	pipelined_cpu.sv	/^logic Reg2Loc, RegWrite,MemWrite;$/;"	r	module:pipelined_cpu
RegWrite	regfile.sv	/^ input logic clk, RegWrite;$/;"	p	module:regfile
RegWrite	regfile.sv	/^ reg RegWrite;$/;"	r	module:rf_tb
RegWrite_EX	pipelined_cpu.sv	/^logic RegWrite_EX, MemWrite_EX, RegWrite_MEM;$/;"	r	module:pipelined_cpu
RegWrite_EX_reg	pipelined_cpu.sv	/^register_v #(1) RegWrite_EX_reg(RegWrite_EX, RegWrite_RF, clk, reset, e); $/;"	i	module:pipelined_cpu
RegWrite_IF	pipelined_cpu.sv	/^logic RegWrite_IF, MemWrite_IF, RegWrite_RF,MemWrite_RF;$/;"	r	module:pipelined_cpu
RegWrite_MEM	pipelined_cpu.sv	/^logic RegWrite_EX, MemWrite_EX, RegWrite_MEM;$/;"	r	module:pipelined_cpu
RegWrite_MEM_reg	pipelined_cpu.sv	/^register_v #(1) RegWrite_MEM_reg(RegWrite_MEM, RegWrite_EX, clk, reset, e); $/;"	i	module:pipelined_cpu
RegWrite_RF	pipelined_cpu.sv	/^logic RegWrite_IF, MemWrite_IF, RegWrite_RF,MemWrite_RF;$/;"	r	module:pipelined_cpu
RegWrite_RF_reg	pipelined_cpu.sv	/^register_v #(1) RegWrite_RF_reg(RegWrite_RF, RegWrite, clk, reset, e); $/;"	i	module:pipelined_cpu
Rm	pipelined_cpu.sv	/^logic [4:0] Rm,Rn,Rd;$/;"	r	module:pipelined_cpu
Rm_RF_reg	pipelined_cpu.sv	/^register_v #(5) Rm_RF_reg(Rm_RF, Rm, clk, reset, e); $/;"	i	module:pipelined_cpu
Rn	pipelined_cpu.sv	/^logic [4:0] Rm,Rn,Rd;$/;"	r	module:pipelined_cpu
Rn_RF_reg	pipelined_cpu.sv	/^register_v #(5) Rn_RF_reg(Rn_RF, Rn, clk, reset, e); $/;"	i	module:pipelined_cpu
STUR	accelerated_branch.sv	/^`define STUR 10$/;"	c
STUR	control.sv	/^`define STUR 10$/;"	c
SUBS	accelerated_branch.sv	/^`define SUBS 11$/;"	c
SUBS	control.sv	/^`define SUBS 11$/;"	c
UncondBr	accelerated_branch.sv	/^logic UncondBr;$/;"	r	module:accelerated_branch
WIDTH	register_v.sv	/^module register_v #(parameter WIDTH=64) (data_out, data_in, clk, reset, e); $/;"	c	module:register_v
WriteData	regfile.sv	/^ input logic [63:0] WriteData;$/;"	p	module:regfile
WriteData	regfile.sv	/^ reg [63:0] WriteData;$/;"	r	module:rf_tb
WriteRegister	regfile.sv	/^ input logic [4:0] ReadRegister1, ReadRegister2, WriteRegister;$/;"	p	module:regfile
WriteRegister	regfile.sv	/^ reg [4:0] WriteRegister;$/;"	r	module:rf_tb
_rf	regfile.sv	/^ reg [31:0][63:0] _rf;$/;"	r	module:rf_tb
a4	pipelined_cpu.sv	/^  add a4(pc_4, pc_out, 64'h4); \/\/pc+4$/;"	i	module:pipelined_cpu
a_br	accelerated_branch.sv	/^  add a_br(pc_br, pc_out, ax); \/\/ pc+ branch addr$/;"	i	module:accelerated_branch
accb	pipelined_cpu.sv	/^accelerated_branch accb(pc_br,BrTaken, pc_out, db,n,o,opcode,imm19,imm26);$/;"	i	module:pipelined_cpu
accelerated_branch	accelerated_branch.sv	/^module accelerated_branch(pc_br,BrTaken, pc_out, db,n,o,opcode,imm19,imm26);$/;"	m
addr_a	forwarding.sv	/^input logic [4:0] addr_a,addr_b; \/\/ sources of present inst$/;"	p	module:forwarding
addr_a	forwarding.sv	/^logic [4:0] addr_a,addr_b; \/\/ sources of present inst$/;"	r	module:forwarding_tb
addr_b	forwarding.sv	/^input logic [4:0] addr_a,addr_b; \/\/ sources of present inst$/;"	p	module:forwarding
addr_b	forwarding.sv	/^logic [4:0] addr_a,addr_b; \/\/ sources of present inst$/;"	r	module:forwarding_tb
alu_b	pipelined_cpu.sv	/^mux4 alu_b (_Db, db_RF, _imm9, _imm12, _imm12, ALUSrc_RF);$/;"	i	module:pipelined_cpu
alu_out_EX_reg	pipelined_cpu.sv	/^register_v #(64) alu_out_EX_reg(alu_out_EX, alu_out, clk, reset, e); $/;"	i	module:pipelined_cpu
ax	accelerated_branch.sv	/^  logic [63:0] ls_in, ax, o0, o1;$/;"	r	module:accelerated_branch
c	pipelined_cpu.sv	/^control c(opcode, Reg2Loc, ALUSrc, MemToReg, RegWrite, MemWrite,ALUOp);$/;"	i	module:pipelined_cpu
clk	pipelined_cpu.sv	/^input logic clk,rst;$/;"	p	module:pipelined_cpu
clk	regfile.sv	/^ input logic clk, RegWrite;$/;"	p	module:regfile
clk	regfile.sv	/^ logic clk, rst;$/;"	r	module:rf_tb
clk	register_v.sv	/^ input logic clk; $/;"	p	module:register_v
clk	register_v.sv	/^ logic clk,reset,e; $/;"	r	module:register_v_testbench
control	control.sv	/^module control(opcode, Reg2Loc, ALUSrc, MemToReg, RegWrite, MemWrite,ALUOp);$/;"	m
d	register_v.sv	/^ logic [63:0] d;$/;"	r	module:register_v_testbench
da	pipelined_cpu.sv	/^logic [63:0] da,db,da_RF,db_RF; \/\/outputs of fwd mux$/;"	r	module:pipelined_cpu
da_RF	pipelined_cpu.sv	/^logic [63:0] da,db,da_RF,db_RF; \/\/outputs of fwd mux$/;"	r	module:pipelined_cpu
da_RF_reg	pipelined_cpu.sv	/^register_v #(64) da_RF_reg(da_RF, da, clk, reset, e); \/\/regfile outputs afer fwd mux$/;"	i	module:pipelined_cpu
data_in	register_v.sv	/^ input logic [WIDTH-1:0] data_in; $/;"	p	module:register_v
data_out	register_v.sv	/^ output logic [WIDTH-1:0] data_out; $/;"	p	module:register_v
db	accelerated_branch.sv	/^input logic [63:0] db;\/\/ take db wire after forwarding muxes$/;"	p	module:accelerated_branch
db	pipelined_cpu.sv	/^logic [63:0] da,db,da_RF,db_RF; \/\/outputs of fwd mux$/;"	r	module:pipelined_cpu
db_EX_reg	pipelined_cpu.sv	/^register_v #(64) db_EX_reg(db_EX, db_RF, clk, reset, e); $/;"	i	module:pipelined_cpu
db_RF	pipelined_cpu.sv	/^logic [63:0] da,db,da_RF,db_RF; \/\/outputs of fwd mux$/;"	r	module:pipelined_cpu
db_RF_reg	pipelined_cpu.sv	/^register_v #(64) db_RF_reg(db_RF, db, clk, reset, e); $/;"	i	module:pipelined_cpu
delay	accelerated_branch.sv	/^parameter delay=50;$/;"	c	module:accelerated_branch
delay	regfile.sv	/^module regfile #(parameter delay = 50) (ReadData1, ReadData2, WriteData, ReadRegister1, ReadRegi/;"	c	module:regfile
dest_ex	forwarding.sv	/^input logic [4:0] dest_ex; \/\/ Dest reg of prev inst$/;"	p	module:forwarding
dest_ex	forwarding.sv	/^logic [4:0] dest_ex; \/\/ Dest reg of prev inst$/;"	r	module:forwarding_tb
dest_mem	forwarding.sv	/^input logic [4:0] dest_mem; \/\/ dest reg (Rd) of inst 2 cycles ago$/;"	p	module:forwarding
dest_mem	forwarding.sv	/^logic [4:0] dest_mem; \/\/ dest reg (Rd) of inst 2 cycles ago$/;"	r	module:forwarding_tb
dff	register_v.sv	/^ D_FF_en dff (.q(data_out[i]), .d(data_in[i]), .reset(reset), .clk(clk), .e(e)); $/;"	i	block:register_v.eachDff
dm	pipelined_cpu.sv	/^datamem dm(addr, MemWrite_EX, 1'b1, db_EX, clk, 4'd8, din);$/;"	i	module:pipelined_cpu
dut	forwarding.sv	/^forwarding dut(forward_a,forward_b,addr_a,addr_b,dest_ex,regwr_ex,dest_mem,regwr_mem);$/;"	i	module:forwarding_tb
dut	regfile.sv	/^ regfile dut(ReadData1, ReadData2, WriteData, ReadRegister1, ReadRegister2, WriteRegister, RegWr/;"	i	module:rf_tb
dut	register_v.sv	/^register_v dut (q, d, clk, reset, e); $/;"	i	module:register_v_testbench
e	pipelined_cpu.sv	/^logic e;$/;"	r	module:pipelined_cpu
e	register_v.sv	/^ input logic reset, e;$/;"	p	module:register_v
e	register_v.sv	/^ logic clk,reset,e; $/;"	r	module:register_v_testbench
eachDff	register_v.sv	/^ for(i=0; i<WIDTH; i++) begin : eachDff $/;"	b	module:register_v
forward_a	forwarding.sv	/^logic [1:0] forward_a, forward_b;$/;"	r	module:forwarding_tb
forward_a	forwarding.sv	/^output logic [1:0] forward_a, forward_b; \/\/ 2 bit control signals to muxes $/;"	p	module:forwarding
forward_a	pipelined_cpu.sv	/^logic forward_a,forward_b;\/\/ mux selects$/;"	r	module:pipelined_cpu
forward_b	forwarding.sv	/^logic [1:0] forward_a, forward_b;$/;"	r	module:forwarding_tb
forward_b	forwarding.sv	/^output logic [1:0] forward_a, forward_b; \/\/ 2 bit control signals to muxes $/;"	p	module:forwarding
forward_b	pipelined_cpu.sv	/^logic forward_a,forward_b;\/\/ mux selects$/;"	r	module:pipelined_cpu
forwarding	forwarding.sv	/^module forwarding (forward_a,forward_b,addr_a,addr_b,dest_ex,regwr_ex,dest_mem,regwr_mem);$/;"	m
forwarding_tb	forwarding.sv	/^module forwarding_tb();$/;"	m
fwd	pipelined_cpu.sv	/^forwarding fwd(forward_a,forward_b,Rn,Rm,Rd_EX,RegWrite_EX,Rd_MEM,RegWrite_MEM);$/;"	i	module:pipelined_cpu
fwd_a	pipelined_cpu.sv	/^mux4 fwd_a(da, Da, alu_out, mem_out, 0,forward_a);$/;"	i	module:pipelined_cpu
fwd_b	pipelined_cpu.sv	/^mux4 fwd_b(db, Db, alu_out, mem_out, 0,forward_b); \/\/USE da db  IN ALU$/;"	i	module:pipelined_cpu
i	accelerated_branch.sv	/^genvar i;$/;"	r	module:accelerated_branch
i	regfile.sv	/^ integer i;$/;"	r	module:rf_tb
i	register_v.sv	/^ genvar i; $/;"	r	module:register_v
id	pipelined_cpu.sv	/^idecode id(inst_IF, opcode, imm12, imm26, imm19, imm9, shamt, w, Rm, Rn, Rd); \/\/what is w?$/;"	i	module:pipelined_cpu
im	pipelined_cpu.sv	/^instructmem im(pc_out, inst, clk);$/;"	i	module:pipelined_cpu
imm12	pipelined_cpu.sv	/^logic [11:0] imm12;$/;"	r	module:pipelined_cpu
imm19	accelerated_branch.sv	/^input logic [18:0] imm19;$/;"	p	module:accelerated_branch
imm19	pipelined_cpu.sv	/^logic [18:0] imm19;$/;"	r	module:pipelined_cpu
imm26	accelerated_branch.sv	/^input logic [25:0] imm26;$/;"	p	module:accelerated_branch
imm26	pipelined_cpu.sv	/^logic [25:0] imm26;$/;"	r	module:pipelined_cpu
imm9	pipelined_cpu.sv	/^logic [8:0] imm9;$/;"	r	module:pipelined_cpu
inst	pipelined_cpu.sv	/^logic [31:0] inst;$/;"	r	module:pipelined_cpu
inst_IF_reg	pipelined_cpu.sv	/^register_v #(32) inst_IF_reg(inst_IF, inst, clk, reset, e); \/\/ INSTRUCTION REGISTER$/;"	i	module:pipelined_cpu
ls	accelerated_branch.sv	/^  LS_2 ls(ax, ls_in); \/\/ left shift 2 (mul4)$/;"	i	module:accelerated_branch
ls_in	accelerated_branch.sv	/^  logic [63:0] ls_in, ax, o0, o1;$/;"	r	module:accelerated_branch
m_br	pipelined_cpu.sv	/^  mux2 m_br(pc_in, pc_4, pc_br, BrTaken_RF); \/\/ pc select mux$/;"	i	module:pipelined_cpu
m_pc	accelerated_branch.sv	/^  mux2 m_pc(ls_in, _imm19, _imm26, UncondBr);$/;"	i	module:accelerated_branch
mem	regfile.sv	/^ reg [0:31][63:0] mem;$/;"	r	module:regfile
mul	pipelined_cpu.sv	/^mult mul(da_RF, db_RF, 1'b1, mul_out, mult_high);$/;"	i	module:pipelined_cpu
mul_out_EX_reg	pipelined_cpu.sv	/^register_v #(64) mul_out_EX_reg(mul_out_EX, mul_out, clk, reset, e); $/;"	i	module:pipelined_cpu
n	accelerated_branch.sv	/^input logic n,o;  \/\/ negative and overflow flags from prev cycle (out of regs)$/;"	p	module:accelerated_branch
o	accelerated_branch.sv	/^input logic n,o;  \/\/ negative and overflow flags from prev cycle (out of regs)$/;"	p	module:accelerated_branch
o0	accelerated_branch.sv	/^  logic [63:0] ls_in, ax, o0, o1;$/;"	r	module:accelerated_branch
o1	accelerated_branch.sv	/^  logic [63:0] ls_in, ax, o0, o1;$/;"	r	module:accelerated_branch
opcode	accelerated_branch.sv	/^input logic [3:0] opcode;$/;"	p	module:accelerated_branch
opcode	control.sv	/^input logic [3:0] opcode;$/;"	p	module:control
opcode	pipelined_cpu.sv	/^logic [3:0] opcode;$/;"	r	module:pipelined_cpu
pc_4	pipelined_cpu.sv	/^logic [63:0] pc_4, pc_br, pc_in;$/;"	r	module:pipelined_cpu
pc_br	accelerated_branch.sv	/^output logic [31:0] pc_br;$/;"	p	module:accelerated_branch
pc_br	pipelined_cpu.sv	/^logic [63:0] pc_4, pc_br, pc_in;$/;"	r	module:pipelined_cpu
pc_in	pipelined_cpu.sv	/^logic [63:0] pc_4, pc_br, pc_in;$/;"	r	module:pipelined_cpu
pc_out	accelerated_branch.sv	/^input logic [31:0] pc_out;$/;"	p	module:accelerated_branch
pc_reg	pipelined_cpu.sv	/^register_v #(64) pc_reg(pc_out, pc_in, clk, rst, 1); \/\/ enable always 1?$/;"	i	module:pipelined_cpu
pipelined_cpu	pipelined_cpu.sv	/^module pipelined_cpu(clk,rst);$/;"	m
q	register_v.sv	/^ logic [63:0] q;$/;"	r	module:register_v_testbench
regfile	regfile.sv	/^module regfile #(parameter delay = 50) (ReadData1, ReadData2, WriteData, ReadRegister1, ReadRegi/;"	m
register_v	register_v.sv	/^module register_v #(parameter WIDTH=64) (data_out, data_in, clk, reset, e); $/;"	m
register_v_testbench	register_v.sv	/^module register_v_testbench(); $/;"	m
regwr_ex	forwarding.sv	/^input logic regwr_ex, regwr_mem; \/\/ write enables of prev 2 cycles $/;"	p	module:forwarding
regwr_ex	forwarding.sv	/^logic regwr_ex, regwr_mem; \/\/ write enables of prev 2 cycles $/;"	r	module:forwarding_tb
regwr_mem	forwarding.sv	/^input logic regwr_ex, regwr_mem; \/\/ write enables of prev 2 cycles $/;"	p	module:forwarding
regwr_mem	forwarding.sv	/^logic regwr_ex, regwr_mem; \/\/ write enables of prev 2 cycles $/;"	r	module:forwarding_tb
reset	register_v.sv	/^ input logic reset, e;$/;"	p	module:register_v
reset	register_v.sv	/^ logic clk,reset,e; $/;"	r	module:register_v_testbench
rf	pipelined_cpu.sv	/^regfile rf(Da, Db, Dw, Rn, Ab, Rd, RegWrite_MEM, clk);$/;"	i	module:pipelined_cpu
rf_tb	regfile.sv	/^module rf_tb(); $/;"	m
rf_write	pipelined_cpu.sv	/^mux4 rf_write(Dw, alu_out_EX, din, mul_out_EX, shift_out_EX, MemToReg_EX);$/;"	i	module:pipelined_cpu
rn_sel	pipelined_cpu.sv	/^mux2_a rn_sel (Ab, Rd, Rm, Reg2Loc);$/;"	i	module:pipelined_cpu
rst	pipelined_cpu.sv	/^input logic clk,rst;$/;"	p	module:pipelined_cpu
rst	regfile.sv	/^ logic clk, rst;$/;"	r	module:rf_tb
s	pipelined_cpu.sv	/^shifter s(da_RF, ~opcode[0], shamt, shift_out);$/;"	i	module:pipelined_cpu
se1	accelerated_branch.sv	/^  se #(19) se1 (_imm19,imm19);$/;"	i	module:accelerated_branch
se2	accelerated_branch.sv	/^  se #(26) se2 (_imm26,imm26);$/;"	i	module:accelerated_branch
shamt	pipelined_cpu.sv	/^logic [5:0] shamt;$/;"	r	module:pipelined_cpu
shift_out_EX_reg	pipelined_cpu.sv	/^register_v #(64) shift_out_EX_reg(shift_out_EX, shift_out, clk, reset, e); $/;"	i	module:pipelined_cpu
tq	accelerated_branch.sv	/^	logic [3:0] tq;$/;"	r	module:accelerated_branch
tr	accelerated_branch.sv	/^	logic [1:0] tr;$/;"	r	module:accelerated_branch
tx	accelerated_branch.sv	/^logic [31:0] tx; \/\/These variables are for zero flag calculation tree of or gates$/;"	r	module:accelerated_branch
ty	accelerated_branch.sv	/^	logic [15:0] ty;$/;"	r	module:accelerated_branch
tz	accelerated_branch.sv	/^	logic [7:0] tz;$/;"	r	module:accelerated_branch
xu	pipelined_cpu.sv	/^alu xu(da_RF, _Db, ALUOp_RF, alu_out, _n, _z, _o, _c);$/;"	i	module:pipelined_cpu
zero	accelerated_branch.sv	/^	logic zero;$/;"	r	module:accelerated_branch
